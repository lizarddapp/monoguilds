/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { OMG, OMGInterface } from "../../contracts/OMG";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [],
    name: "addValue",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "cap",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getValue",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "valueA",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "valueB",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50612052806100206000396000f3fe608060405234801561001057600080fd5b50600436106101205760003560e01c806339509351116100ad57806395d89b411161007157806395d89b41146102e75780639dc29fac14610305578063a457c2d714610321578063a9059cbb14610351578063dd62ed3e1461038157610120565b8063395093511461024357806340c10f19146102735780636af155051461028f57806370a08231146102ad5780638129fc1c146102dd57610120565b806318160ddd116100f457806318160ddd1461019b57806320965255146101b957806323b872dd146101d7578063313ce56714610207578063355274ea1461022557610120565b8062df516114610125578063040f0aee1461014357806306fdde031461014d578063095ea7b31461016b575b600080fd5b61012d6103b1565b60405161013a9190611a2f565b60405180910390f35b61014b6103b7565b005b6101556103ce565b604051610162919061184d565b60405180910390f35b610185600480360381019061018091906115a6565b610460565b6040516101929190611832565b60405180910390f35b6101a3610483565b6040516101b09190611a2f565b60405180910390f35b6101c161048d565b6040516101ce9190611a2f565b60405180910390f35b6101f160048036038101906101ec9190611557565b610496565b6040516101fe9190611832565b60405180910390f35b61020f6104c5565b60405161021c9190611a4a565b60405180910390f35b61022d6104ce565b60405161023a9190611a2f565b60405180910390f35b61025d600480360381019061025891906115a6565b6104d8565b60405161026a9190611832565b60405180910390f35b61028d600480360381019061028891906115a6565b610582565b005b610297610590565b6040516102a49190611a2f565b60405180910390f35b6102c760048036038101906102c291906114f2565b610596565b6040516102d49190611a2f565b60405180910390f35b6102e56105df565b005b6102ef610757565b6040516102fc919061184d565b60405180910390f35b61031f600480360381019061031a91906115a6565b6107e9565b005b61033b600480360381019061033691906115a6565b6107f7565b6040516103489190611832565b60405180910390f35b61036b600480360381019061036691906115a6565b6108e1565b6040516103789190611832565b60405180910390f35b61039b6004803603810190610396919061151b565b610904565b6040516103a89190611a2f565b60405180910390f35b60995481565b60016098546103c69190611ad7565b609881905550565b6060603680546103dd90611b93565b80601f016020809104026020016040519081016040528092919081815260200182805461040990611b93565b80156104565780601f1061042b57610100808354040283529160200191610456565b820191906000526020600020905b81548152906001019060200180831161043957829003601f168201915b5050505050905090565b60008061046b61098b565b9050610478818585610993565b600191505092915050565b6000603554905090565b60006037905090565b6000806104a161098b565b90506104ae858285610b5e565b6104b9858585610bea565b60019150509392505050565b60006012905090565b6000606554905090565b6000806104e361098b565b9050610577818585603460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546105729190611a81565b610993565b600191505092915050565b61058c8282610e6e565b5050565b60985481565b6000603360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600060019054906101000a900460ff166106075760008054906101000a900460ff1615610610565b61060f610ed8565b5b61064f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106469061192f565b60405180910390fd5b60008060019054906101000a900460ff16159050801561069f576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6107136040518060400160405280600981526020017f4f4d4720546f6b656e00000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f4f4d470000000000000000000000000000000000000000000000000000000000815250610ee9565b6107276aa56fa5b99019a5c8000000610f46565b61073333612710610e6e565b80156107545760008060016101000a81548160ff0219169083151502179055505b50565b60606037805461076690611b93565b80601f016020809104026020016040519081016040528092919081815260200182805461079290611b93565b80156107df5780601f106107b4576101008083540402835291602001916107df565b820191906000526020600020905b8154815290600101906020018083116107c257829003601f168201915b5050505050905090565b6107f38282610fa1565b5050565b60008061080261098b565b90506000603460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050838110156108c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108bf906119ef565b60405180910390fd5b6108d58286868403610993565b60019250505092915050565b6000806108ec61098b565b90506108f9818585610bea565b600191505092915050565b6000603460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610a03576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109fa906119af565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610a73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6a906118cf565b60405180910390fd5b80603460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610b519190611a2f565b60405180910390a3505050565b6000610b6a8484610904565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610be45781811015610bd6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bcd906118ef565b60405180910390fd5b610be38484848403610993565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610c5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c519061196f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610cca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc19061186f565b60405180910390fd5b610cd583838361117a565b6000603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610d5c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d539061190f565b60405180910390fd5b818103603360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610df19190611a81565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610e559190611a2f565b60405180910390a3610e6884848461117f565b50505050565b610e766104ce565b81610e7f610483565b610e899190611a81565b1115610eca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ec19061198f565b60405180910390fd5b610ed48282611184565b5050565b6000610ee3306112e5565b15905090565b600060019054906101000a900460ff16610f38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2f906119cf565b60405180910390fd5b610f428282611308565b5050565b600060019054906101000a900460ff16610f95576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f8c906119cf565b60405180910390fd5b610f9e81611389565b50565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611011576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110089061194f565b60405180910390fd5b61101d8260008361117a565b6000603360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156110a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161109b906118af565b60405180910390fd5b818103603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081603560008282546110fc9190611ad7565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516111619190611a2f565b60405180910390a36111758360008461117f565b505050565b505050565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156111f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111eb90611a0f565b60405180910390fd5b6112006000838361117a565b80603560008282546112129190611a81565b9250508190555080603360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546112689190611a81565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516112cd9190611a2f565b60405180910390a36112e16000838361117f565b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16611357576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161134e906119cf565b60405180910390fd5b816036908051906020019061136d929190611425565b508060379080519060200190611384929190611425565b505050565b600060019054906101000a900460ff166113d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113cf906119cf565b60405180910390fd5b6000811161141b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114129061188f565b60405180910390fd5b8060658190555050565b82805461143190611b93565b90600052602060002090601f016020900481019282611453576000855561149a565b82601f1061146c57805160ff191683800117855561149a565b8280016001018555821561149a579182015b8281111561149957825182559160200191906001019061147e565b5b5090506114a791906114ab565b5090565b5b808211156114c45760008160009055506001016114ac565b5090565b6000813590506114d781611fee565b92915050565b6000813590506114ec81612005565b92915050565b60006020828403121561150457600080fd5b6000611512848285016114c8565b91505092915050565b6000806040838503121561152e57600080fd5b600061153c858286016114c8565b925050602061154d858286016114c8565b9150509250929050565b60008060006060848603121561156c57600080fd5b600061157a868287016114c8565b935050602061158b868287016114c8565b925050604061159c868287016114dd565b9150509250925092565b600080604083850312156115b957600080fd5b60006115c7858286016114c8565b92505060206115d8858286016114dd565b9150509250929050565b6115eb81611b1d565b82525050565b60006115fc82611a65565b6116068185611a70565b9350611616818560208601611b60565b61161f81611c23565b840191505092915050565b6000611637602383611a70565b915061164282611c34565b604082019050919050565b600061165a601583611a70565b915061166582611c83565b602082019050919050565b600061167d602283611a70565b915061168882611cac565b604082019050919050565b60006116a0602283611a70565b91506116ab82611cfb565b604082019050919050565b60006116c3601d83611a70565b91506116ce82611d4a565b602082019050919050565b60006116e6602683611a70565b91506116f182611d73565b604082019050919050565b6000611709602e83611a70565b915061171482611dc2565b604082019050919050565b600061172c602183611a70565b915061173782611e11565b604082019050919050565b600061174f602583611a70565b915061175a82611e60565b604082019050919050565b6000611772601983611a70565b915061177d82611eaf565b602082019050919050565b6000611795602483611a70565b91506117a082611ed8565b604082019050919050565b60006117b8602b83611a70565b91506117c382611f27565b604082019050919050565b60006117db602583611a70565b91506117e682611f76565b604082019050919050565b60006117fe601f83611a70565b915061180982611fc5565b602082019050919050565b61181d81611b49565b82525050565b61182c81611b53565b82525050565b600060208201905061184760008301846115e2565b92915050565b6000602082019050818103600083015261186781846115f1565b905092915050565b600060208201905081810360008301526118888161162a565b9050919050565b600060208201905081810360008301526118a88161164d565b9050919050565b600060208201905081810360008301526118c881611670565b9050919050565b600060208201905081810360008301526118e881611693565b9050919050565b60006020820190508181036000830152611908816116b6565b9050919050565b60006020820190508181036000830152611928816116d9565b9050919050565b60006020820190508181036000830152611948816116fc565b9050919050565b600060208201905081810360008301526119688161171f565b9050919050565b6000602082019050818103600083015261198881611742565b9050919050565b600060208201905081810360008301526119a881611765565b9050919050565b600060208201905081810360008301526119c881611788565b9050919050565b600060208201905081810360008301526119e8816117ab565b9050919050565b60006020820190508181036000830152611a08816117ce565b9050919050565b60006020820190508181036000830152611a28816117f1565b9050919050565b6000602082019050611a446000830184611814565b92915050565b6000602082019050611a5f6000830184611823565b92915050565b600081519050919050565b600082825260208201905092915050565b6000611a8c82611b49565b9150611a9783611b49565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611acc57611acb611bc5565b5b828201905092915050565b6000611ae282611b49565b9150611aed83611b49565b925082821015611b0057611aff611bc5565b5b828203905092915050565b6000611b1682611b29565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b83811015611b7e578082015181840152602081019050611b63565b83811115611b8d576000848401525b50505050565b60006002820490506001821680611bab57607f821691505b60208210811415611bbf57611bbe611bf4565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332304361707065643a2063617020697320300000000000000000000000600082015250565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f45524332304361707065643a2063617020657863656564656400000000000000600082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b611ff781611b0b565b811461200257600080fd5b50565b61200e81611b49565b811461201957600080fd5b5056fea2646970667358221220f6ed3fae25c86f8cd81731258a6e25198b6c24cb01b6d9af23d46b8ee1d36f0e64736f6c63430008020033";

type OMGConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OMGConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OMG__factory extends ContractFactory {
  constructor(...args: OMGConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<OMG> {
    return super.deploy(overrides || {}) as Promise<OMG>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): OMG {
    return super.attach(address) as OMG;
  }
  override connect(signer: Signer): OMG__factory {
    return super.connect(signer) as OMG__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OMGInterface {
    return new utils.Interface(_abi) as OMGInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): OMG {
    return new Contract(address, _abi, signerOrProvider) as OMG;
  }
}
