/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  SapphireToken,
  SapphireTokenInterface,
} from "../../../contracts/SapphireToken.sol/SapphireToken";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "cap",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061193a806100206000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063395093511161008c57806395d89b411161006657806395d89b4114610216578063a457c2d714610234578063a9059cbb14610264578063dd62ed3e14610294576100cf565b806339509351146101ac57806370a08231146101dc5780638129fc1c1461020c576100cf565b806306fdde03146100d4578063095ea7b3146100f257806318160ddd1461012257806323b872dd14610140578063313ce56714610170578063355274ea1461018e575b600080fd5b6100dc6102c4565b6040516100e991906112d9565b60405180910390f35b61010c600480360381019061010791906110be565b610356565b60405161011991906112be565b60405180910390f35b61012a610379565b604051610137919061143b565b60405180910390f35b61015a6004803603810190610155919061106f565b610383565b60405161016791906112be565b60405180910390f35b6101786103b2565b6040516101859190611456565b60405180910390f35b6101966103bb565b6040516101a3919061143b565b60405180910390f35b6101c660048036038101906101c191906110be565b6103c5565b6040516101d391906112be565b60405180910390f35b6101f660048036038101906101f1919061100a565b61046f565b604051610203919061143b565b60405180910390f35b6102146104b8565b005b61021e610621565b60405161022b91906112d9565b60405180910390f35b61024e600480360381019061024991906110be565b6106b3565b60405161025b91906112be565b60405180910390f35b61027e600480360381019061027991906110be565b61079d565b60405161028b91906112be565b60405180910390f35b6102ae60048036038101906102a99190611033565b6107c0565b6040516102bb919061143b565b60405180910390f35b6060603680546102d39061156b565b80601f01602080910402602001604051908101604052809291908181526020018280546102ff9061156b565b801561034c5780601f106103215761010080835404028352916020019161034c565b820191906000526020600020905b81548152906001019060200180831161032f57829003601f168201915b5050505050905090565b600080610361610847565b905061036e81858561084f565b600191505092915050565b6000603554905090565b60008061038e610847565b905061039b858285610a1a565b6103a6858585610aa6565b60019150509392505050565b60006012905090565b6000606554905090565b6000806103d0610847565b9050610464818585603460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461045f919061148d565b61084f565b600191505092915050565b6000603360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600060019054906101000a900460ff166104e05760008054906101000a900460ff16156104e9565b6104e8610d2a565b5b610528576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051f9061139b565b60405180910390fd5b60008060019054906101000a900460ff161590508015610578576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6105ec6040518060400160405280600e81526020017f536170706869726520546f6b656e0000000000000000000000000000000000008152506040518060400160405280600881526020017f5341505048495245000000000000000000000000000000000000000000000000815250610d3b565b6105fd678ac7230489e80000610d98565b801561061e5760008060016101000a81548160ff0219169083151502179055505b50565b6060603780546106309061156b565b80601f016020809104026020016040519081016040528092919081815260200182805461065c9061156b565b80156106a95780601f1061067e576101008083540402835291602001916106a9565b820191906000526020600020905b81548152906001019060200180831161068c57829003601f168201915b5050505050905090565b6000806106be610847565b90506000603460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905083811015610784576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077b9061141b565b60405180910390fd5b610791828686840361084f565b60019250505092915050565b6000806107a8610847565b90506107b5818585610aa6565b600191505092915050565b6000603460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156108bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b6906113db565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561092f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109269061133b565b60405180910390fd5b80603460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610a0d919061143b565b60405180910390a3505050565b6000610a2684846107c0565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610aa05781811015610a92576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a899061135b565b60405180910390fd5b610a9f848484840361084f565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610b16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0d906113bb565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610b86576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7d906112fb565b60405180910390fd5b610b91838383610df3565b6000603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610c18576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0f9061137b565b60405180910390fd5b818103603360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610cad919061148d565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610d11919061143b565b60405180910390a3610d24848484610df8565b50505050565b6000610d3530610dfd565b15905090565b600060019054906101000a900460ff16610d8a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d81906113fb565b60405180910390fd5b610d948282610e20565b5050565b600060019054906101000a900460ff16610de7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dde906113fb565b60405180910390fd5b610df081610ea1565b50565b505050565b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16610e6f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e66906113fb565b60405180910390fd5b8160369080519060200190610e85929190610f3d565b508060379080519060200190610e9c929190610f3d565b505050565b600060019054906101000a900460ff16610ef0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee7906113fb565b60405180910390fd5b60008111610f33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2a9061131b565b60405180910390fd5b8060658190555050565b828054610f499061156b565b90600052602060002090601f016020900481019282610f6b5760008555610fb2565b82601f10610f8457805160ff1916838001178555610fb2565b82800160010185558215610fb2579182015b82811115610fb1578251825591602001919060010190610f96565b5b509050610fbf9190610fc3565b5090565b5b80821115610fdc576000816000905550600101610fc4565b5090565b600081359050610fef816118d6565b92915050565b600081359050611004816118ed565b92915050565b60006020828403121561101c57600080fd5b600061102a84828501610fe0565b91505092915050565b6000806040838503121561104657600080fd5b600061105485828601610fe0565b925050602061106585828601610fe0565b9150509250929050565b60008060006060848603121561108457600080fd5b600061109286828701610fe0565b93505060206110a386828701610fe0565b92505060406110b486828701610ff5565b9150509250925092565b600080604083850312156110d157600080fd5b60006110df85828601610fe0565b92505060206110f085828601610ff5565b9150509250929050565b611103816114f5565b82525050565b600061111482611471565b61111e818561147c565b935061112e818560208601611538565b611137816115fb565b840191505092915050565b600061114f60238361147c565b915061115a8261160c565b604082019050919050565b600061117260158361147c565b915061117d8261165b565b602082019050919050565b600061119560228361147c565b91506111a082611684565b604082019050919050565b60006111b8601d8361147c565b91506111c3826116d3565b602082019050919050565b60006111db60268361147c565b91506111e6826116fc565b604082019050919050565b60006111fe602e8361147c565b91506112098261174b565b604082019050919050565b600061122160258361147c565b915061122c8261179a565b604082019050919050565b600061124460248361147c565b915061124f826117e9565b604082019050919050565b6000611267602b8361147c565b915061127282611838565b604082019050919050565b600061128a60258361147c565b915061129582611887565b604082019050919050565b6112a981611521565b82525050565b6112b88161152b565b82525050565b60006020820190506112d360008301846110fa565b92915050565b600060208201905081810360008301526112f38184611109565b905092915050565b6000602082019050818103600083015261131481611142565b9050919050565b6000602082019050818103600083015261133481611165565b9050919050565b6000602082019050818103600083015261135481611188565b9050919050565b60006020820190508181036000830152611374816111ab565b9050919050565b60006020820190508181036000830152611394816111ce565b9050919050565b600060208201905081810360008301526113b4816111f1565b9050919050565b600060208201905081810360008301526113d481611214565b9050919050565b600060208201905081810360008301526113f481611237565b9050919050565b600060208201905081810360008301526114148161125a565b9050919050565b600060208201905081810360008301526114348161127d565b9050919050565b600060208201905061145060008301846112a0565b92915050565b600060208201905061146b60008301846112af565b92915050565b600081519050919050565b600082825260208201905092915050565b600061149882611521565b91506114a383611521565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156114d8576114d761159d565b5b828201905092915050565b60006114ee82611501565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b8381101561155657808201518184015260208101905061153b565b83811115611565576000848401525b50505050565b6000600282049050600182168061158357607f821691505b60208210811415611597576115966115cc565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332304361707065643a2063617020697320300000000000000000000000600082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6118df816114e3565b81146118ea57600080fd5b50565b6118f681611521565b811461190157600080fd5b5056fea264697066735822122053ed702c06c2e7aef263cc9d318493ce793ec923436bc00243f76ee6ca8ab1a964736f6c63430008040033";

type SapphireTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SapphireTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SapphireToken__factory extends ContractFactory {
  constructor(...args: SapphireTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SapphireToken> {
    return super.deploy(overrides || {}) as Promise<SapphireToken>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SapphireToken {
    return super.attach(address) as SapphireToken;
  }
  override connect(signer: Signer): SapphireToken__factory {
    return super.connect(signer) as SapphireToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SapphireTokenInterface {
    return new utils.Interface(_abi) as SapphireTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SapphireToken {
    return new Contract(address, _abi, signerOrProvider) as SapphireToken;
  }
}
