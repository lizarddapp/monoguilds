/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AccessControlEnumerableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlEnumerableUpgradeable__factory>;
    getContractFactory(
      name: "AccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlUpgradeable__factory>;
    getContractFactory(
      name: "IAccessControlEnumerableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlEnumerableUpgradeable__factory>;
    getContractFactory(
      name: "IAccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlUpgradeable__factory>;
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "PausableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PausableUpgradeable__factory>;
    getContractFactory(
      name: "ERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Upgradeable__factory>;
    getContractFactory(
      name: "ERC20CappedUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20CappedUpgradeable__factory>;
    getContractFactory(
      name: "IERC20MetadataUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20MetadataUpgradeable__factory>;
    getContractFactory(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Upgradeable__factory>;
    getContractFactory(
      name: "ERC721Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Upgradeable__factory>;
    getContractFactory(
      name: "ERC721EnumerableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721EnumerableUpgradeable__factory>;
    getContractFactory(
      name: "IERC721EnumerableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721EnumerableUpgradeable__factory>;
    getContractFactory(
      name: "IERC721MetadataUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721MetadataUpgradeable__factory>;
    getContractFactory(
      name: "IERC721ReceiverUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721ReceiverUpgradeable__factory>;
    getContractFactory(
      name: "IERC721Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Upgradeable__factory>;
    getContractFactory(
      name: "ERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165Upgradeable__factory>;
    getContractFactory(
      name: "IERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165Upgradeable__factory>;
    getContractFactory(
      name: "GM",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GM__factory>;
    getContractFactory(
      name: "Guild",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Guild__factory>;
    getContractFactory(
      name: "GuildAction",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GuildAction__factory>;
    getContractFactory(
      name: "IGuild",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGuild__factory>;
    getContractFactory(
      name: "IPiece",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPiece__factory>;
    getContractFactory(
      name: "IProfile",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IProfile__factory>;
    getContractFactory(
      name: "Piece",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Piece__factory>;
    getContractFactory(
      name: "PieceAction",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PieceAction__factory>;
    getContractFactory(
      name: "Profile",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Profile__factory>;
    getContractFactory(
      name: "Random",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Random__factory>;
    getContractFactory(
      name: "SapphireToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SapphireToken__factory>;
    getContractFactory(
      name: "StakingReward",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakingReward__factory>;

    getContractAt(
      name: "AccessControlEnumerableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlEnumerableUpgradeable>;
    getContractAt(
      name: "AccessControlUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlUpgradeable>;
    getContractAt(
      name: "IAccessControlEnumerableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControlEnumerableUpgradeable>;
    getContractAt(
      name: "IAccessControlUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControlUpgradeable>;
    getContractAt(
      name: "OwnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: "PausableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PausableUpgradeable>;
    getContractAt(
      name: "ERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Upgradeable>;
    getContractAt(
      name: "ERC20CappedUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20CappedUpgradeable>;
    getContractAt(
      name: "IERC20MetadataUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20MetadataUpgradeable>;
    getContractAt(
      name: "IERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Upgradeable>;
    getContractAt(
      name: "ERC721Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Upgradeable>;
    getContractAt(
      name: "ERC721EnumerableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721EnumerableUpgradeable>;
    getContractAt(
      name: "IERC721EnumerableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721EnumerableUpgradeable>;
    getContractAt(
      name: "IERC721MetadataUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721MetadataUpgradeable>;
    getContractAt(
      name: "IERC721ReceiverUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721ReceiverUpgradeable>;
    getContractAt(
      name: "IERC721Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Upgradeable>;
    getContractAt(
      name: "ERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165Upgradeable>;
    getContractAt(
      name: "IERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165Upgradeable>;
    getContractAt(
      name: "GM",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GM>;
    getContractAt(
      name: "Guild",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Guild>;
    getContractAt(
      name: "GuildAction",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GuildAction>;
    getContractAt(
      name: "IGuild",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGuild>;
    getContractAt(
      name: "IPiece",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPiece>;
    getContractAt(
      name: "IProfile",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IProfile>;
    getContractAt(
      name: "Piece",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Piece>;
    getContractAt(
      name: "PieceAction",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PieceAction>;
    getContractAt(
      name: "Profile",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Profile>;
    getContractAt(
      name: "Random",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Random>;
    getContractAt(
      name: "SapphireToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SapphireToken>;
    getContractAt(
      name: "StakingReward",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StakingReward>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
