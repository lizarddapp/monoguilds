/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface GuildActionV2Interface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "GUILD_PRESALE_PRICE()": FunctionFragment;
    "GUILD_PRESALE_SUPPLY()": FunctionFragment;
    "MANAGER_ROLE()": FunctionFragment;
    "claimGuild(string)": FunctionFragment;
    "claimGuildPause()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "getValue()": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "guild()": FunctionFragment;
    "guildMemberList(uint256)": FunctionFragment;
    "guildMembers(uint256,uint256)": FunctionFragment;
    "guildPrice()": FunctionFragment;
    "guildSettings(uint256)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "init(address)": FunctionFragment;
    "initialize(address,address,address,address)": FunctionFragment;
    "joinGuild(uint256)": FunctionFragment;
    "joinGuildPause()": FunctionFragment;
    "leaveGuild(uint256)": FunctionFragment;
    "maxMembers()": FunctionFragment;
    "nameTaken(string)": FunctionFragment;
    "nameToIndex(string)": FunctionFragment;
    "paused()": FunctionFragment;
    "presaleClaimGuild(string)": FunctionFragment;
    "profile()": FunctionFragment;
    "profileJoinGuildInfo(uint256)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "sapphire()": FunctionFragment;
    "setClaimGuildPause(bool)": FunctionFragment;
    "setJoinGuildPause(bool)": FunctionFragment;
    "setMaxMembers(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "withdrawToken(address,address,uint256)": FunctionFragment;
    "withdrawValue(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "GUILD_PRESALE_PRICE"
      | "GUILD_PRESALE_SUPPLY"
      | "MANAGER_ROLE"
      | "claimGuild"
      | "claimGuildPause"
      | "getRoleAdmin"
      | "getRoleMember"
      | "getRoleMemberCount"
      | "getValue"
      | "grantRole"
      | "guild"
      | "guildMemberList"
      | "guildMembers"
      | "guildPrice"
      | "guildSettings"
      | "hasRole"
      | "init"
      | "initialize"
      | "joinGuild"
      | "joinGuildPause"
      | "leaveGuild"
      | "maxMembers"
      | "nameTaken"
      | "nameToIndex"
      | "paused"
      | "presaleClaimGuild"
      | "profile"
      | "profileJoinGuildInfo"
      | "renounceRole"
      | "revokeRole"
      | "sapphire"
      | "setClaimGuildPause"
      | "setJoinGuildPause"
      | "setMaxMembers"
      | "supportsInterface"
      | "withdrawToken"
      | "withdrawValue"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GUILD_PRESALE_PRICE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GUILD_PRESALE_SUPPLY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "claimGuild", values: [string]): string;
  encodeFunctionData(
    functionFragment: "claimGuildPause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getValue", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "guild", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "guildMemberList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "guildMembers",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "guildPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "guildSettings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "init", values: [string]): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "joinGuild",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "joinGuildPause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "leaveGuild",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "maxMembers",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nameTaken", values: [string]): string;
  encodeFunctionData(functionFragment: "nameToIndex", values: [string]): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "presaleClaimGuild",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "profile", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "profileJoinGuildInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "sapphire", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setClaimGuildPause",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setJoinGuildPause",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxMembers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawValue",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GUILD_PRESALE_PRICE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GUILD_PRESALE_SUPPLY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimGuild", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimGuildPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getValue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "guild", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "guildMemberList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "guildMembers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "guildPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "guildSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "joinGuild", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "joinGuildPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "leaveGuild", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxMembers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nameTaken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nameToIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "presaleClaimGuild",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "profile", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "profileJoinGuildInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sapphire", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setClaimGuildPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setJoinGuildPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxMembers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawValue",
    data: BytesLike
  ): Result;

  events: {
    "CreateGuild(uint256,address,string)": EventFragment;
    "JoinGuild(uint256,uint256,uint256)": EventFragment;
    "LeaveGuild(uint256,uint256,uint256)": EventFragment;
    "Paused(address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CreateGuild"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "JoinGuild"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LeaveGuild"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface CreateGuildEventObject {
  tokenId: BigNumber;
  to: string;
  name: string;
}
export type CreateGuildEvent = TypedEvent<
  [BigNumber, string, string],
  CreateGuildEventObject
>;

export type CreateGuildEventFilter = TypedEventFilter<CreateGuildEvent>;

export interface JoinGuildEventObject {
  profileId: BigNumber;
  guildId: BigNumber;
  joinAt: BigNumber;
}
export type JoinGuildEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  JoinGuildEventObject
>;

export type JoinGuildEventFilter = TypedEventFilter<JoinGuildEvent>;

export interface LeaveGuildEventObject {
  profileId: BigNumber;
  guildId: BigNumber;
  leaveAt: BigNumber;
}
export type LeaveGuildEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  LeaveGuildEventObject
>;

export type LeaveGuildEventFilter = TypedEventFilter<LeaveGuildEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface GuildActionV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GuildActionV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    GUILD_PRESALE_PRICE(overrides?: CallOverrides): Promise<[BigNumber]>;

    GUILD_PRESALE_SUPPLY(overrides?: CallOverrides): Promise<[BigNumber]>;

    MANAGER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    claimGuild(
      _name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimGuildPause(overrides?: CallOverrides): Promise<[boolean]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    guild(overrides?: CallOverrides): Promise<[string]>;

    guildMemberList(
      _guildId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    guildMembers(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    guildPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    guildSettings(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, boolean] & { name: string; inviteOnly: boolean }>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    init(
      _managerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _adminAddress: string,
      _guildAddress: string,
      _profileAddress: string,
      _sapphireAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    joinGuild(
      _guildId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    joinGuildPause(overrides?: CallOverrides): Promise<[boolean]>;

    leaveGuild(
      _guildId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    maxMembers(overrides?: CallOverrides): Promise<[BigNumber]>;

    nameTaken(
      name: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { taken: boolean }>;

    nameToIndex(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    presaleClaimGuild(
      _name: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    profile(overrides?: CallOverrides): Promise<[string]>;

    profileJoinGuildInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, BigNumber] & {
        guildId: BigNumber;
        joined: boolean;
        joinedAt: BigNumber;
      }
    >;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sapphire(overrides?: CallOverrides): Promise<[string]>;

    setClaimGuildPause(
      _isPause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setJoinGuildPause(
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxMembers(
      _count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    withdrawToken(
      _tokenContract: string,
      _whereTo: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawValue(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  GUILD_PRESALE_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

  GUILD_PRESALE_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

  MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

  claimGuild(
    _name: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimGuildPause(overrides?: CallOverrides): Promise<boolean>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getRoleMember(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getValue(overrides?: CallOverrides): Promise<BigNumber>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  guild(overrides?: CallOverrides): Promise<string>;

  guildMemberList(
    _guildId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  guildMembers(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  guildPrice(overrides?: CallOverrides): Promise<BigNumber>;

  guildSettings(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, boolean] & { name: string; inviteOnly: boolean }>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  init(
    _managerAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _adminAddress: string,
    _guildAddress: string,
    _profileAddress: string,
    _sapphireAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  joinGuild(
    _guildId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  joinGuildPause(overrides?: CallOverrides): Promise<boolean>;

  leaveGuild(
    _guildId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  maxMembers(overrides?: CallOverrides): Promise<BigNumber>;

  nameTaken(name: string, overrides?: CallOverrides): Promise<boolean>;

  nameToIndex(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  presaleClaimGuild(
    _name: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  profile(overrides?: CallOverrides): Promise<string>;

  profileJoinGuildInfo(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean, BigNumber] & {
      guildId: BigNumber;
      joined: boolean;
      joinedAt: BigNumber;
    }
  >;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sapphire(overrides?: CallOverrides): Promise<string>;

  setClaimGuildPause(
    _isPause: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setJoinGuildPause(
    _status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxMembers(
    _count: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  withdrawToken(
    _tokenContract: string,
    _whereTo: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawValue(
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    GUILD_PRESALE_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    GUILD_PRESALE_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

    claimGuild(_name: string, overrides?: CallOverrides): Promise<void>;

    claimGuildPause(overrides?: CallOverrides): Promise<boolean>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValue(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    guild(overrides?: CallOverrides): Promise<string>;

    guildMemberList(
      _guildId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    guildMembers(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    guildPrice(overrides?: CallOverrides): Promise<BigNumber>;

    guildSettings(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, boolean] & { name: string; inviteOnly: boolean }>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    init(_managerAddress: string, overrides?: CallOverrides): Promise<void>;

    initialize(
      _adminAddress: string,
      _guildAddress: string,
      _profileAddress: string,
      _sapphireAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    joinGuild(_guildId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    joinGuildPause(overrides?: CallOverrides): Promise<boolean>;

    leaveGuild(
      _guildId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    maxMembers(overrides?: CallOverrides): Promise<BigNumber>;

    nameTaken(name: string, overrides?: CallOverrides): Promise<boolean>;

    nameToIndex(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    presaleClaimGuild(_name: string, overrides?: CallOverrides): Promise<void>;

    profile(overrides?: CallOverrides): Promise<string>;

    profileJoinGuildInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, BigNumber] & {
        guildId: BigNumber;
        joined: boolean;
        joinedAt: BigNumber;
      }
    >;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    sapphire(overrides?: CallOverrides): Promise<string>;

    setClaimGuildPause(
      _isPause: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setJoinGuildPause(
      _status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxMembers(
      _count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdrawToken(
      _tokenContract: string,
      _whereTo: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawValue(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CreateGuild(uint256,address,string)"(
      tokenId?: BigNumberish | null,
      to?: string | null,
      name?: null
    ): CreateGuildEventFilter;
    CreateGuild(
      tokenId?: BigNumberish | null,
      to?: string | null,
      name?: null
    ): CreateGuildEventFilter;

    "JoinGuild(uint256,uint256,uint256)"(
      profileId?: BigNumberish | null,
      guildId?: BigNumberish | null,
      joinAt?: null
    ): JoinGuildEventFilter;
    JoinGuild(
      profileId?: BigNumberish | null,
      guildId?: BigNumberish | null,
      joinAt?: null
    ): JoinGuildEventFilter;

    "LeaveGuild(uint256,uint256,uint256)"(
      profileId?: BigNumberish | null,
      guildId?: BigNumberish | null,
      leaveAt?: null
    ): LeaveGuildEventFilter;
    LeaveGuild(
      profileId?: BigNumberish | null,
      guildId?: BigNumberish | null,
      leaveAt?: null
    ): LeaveGuildEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    GUILD_PRESALE_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    GUILD_PRESALE_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    MANAGER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    claimGuild(
      _name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimGuildPause(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValue(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    guild(overrides?: CallOverrides): Promise<BigNumber>;

    guildMemberList(
      _guildId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    guildMembers(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    guildPrice(overrides?: CallOverrides): Promise<BigNumber>;

    guildSettings(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    init(
      _managerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      _adminAddress: string,
      _guildAddress: string,
      _profileAddress: string,
      _sapphireAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    joinGuild(
      _guildId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    joinGuildPause(overrides?: CallOverrides): Promise<BigNumber>;

    leaveGuild(
      _guildId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    maxMembers(overrides?: CallOverrides): Promise<BigNumber>;

    nameTaken(name: string, overrides?: CallOverrides): Promise<BigNumber>;

    nameToIndex(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    presaleClaimGuild(
      _name: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    profile(overrides?: CallOverrides): Promise<BigNumber>;

    profileJoinGuildInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sapphire(overrides?: CallOverrides): Promise<BigNumber>;

    setClaimGuildPause(
      _isPause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setJoinGuildPause(
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxMembers(
      _count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawToken(
      _tokenContract: string,
      _whereTo: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawValue(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GUILD_PRESALE_PRICE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GUILD_PRESALE_SUPPLY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MANAGER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimGuild(
      _name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimGuildPause(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    guild(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    guildMemberList(
      _guildId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    guildMembers(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    guildPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    guildSettings(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    init(
      _managerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _adminAddress: string,
      _guildAddress: string,
      _profileAddress: string,
      _sapphireAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    joinGuild(
      _guildId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    joinGuildPause(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    leaveGuild(
      _guildId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    maxMembers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nameTaken(
      name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nameToIndex(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    presaleClaimGuild(
      _name: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    profile(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    profileJoinGuildInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sapphire(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setClaimGuildPause(
      _isPause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setJoinGuildPause(
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxMembers(
      _count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawToken(
      _tokenContract: string,
      _whereTo: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawValue(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
